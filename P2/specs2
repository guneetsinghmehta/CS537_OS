1. when a bad priority is passed to setpri , i.e not 1 or 2 then return -1 => indicating error else return 0 n success
2. if bad pointer is passed to getpinfo() => return -1 else return 0
3. 1- low priority. 2 is a high priority
4  high priority processes run 
5 each process by default has priority 1
6 if two or more priority 2 processes then round robin
7 id a high priority process is there then priority 1 does not run

implement 
1 int setpri (int num)
each calling process can set its priority - either 1 or 2

2 int getpinfo(struct pstat *).
returns some basic information about each running process, including how many times it has been chosen to run how long it has run at each priority (measured in clock ticks) and its process ID. 

If either of these calls are passed bad parameters, return -1 to indicate a failure. Otherwise, return 0 upon success.

Most of the code for the scheduler is quite localized and can be found in proc.c. The associated header file, proc.h is also quite useful to examine. To change the scheduler, not much needs to be done; study its control flow and then try some small changes.

You'll need to understand how to fill in the structure pstat in the kernel and pass the results to user space. 
#ifndef _PSTAT_H_
#define _PSTAT_H_

#include "param.h"

struct pstat {
    int inuse[NPROC];  // whether this slot of the process process table is in use (1 or 0)
    int pid[NPROC];    // the PID of each process
    int hticks[NPROC]; // the number of ticks each process has accumulated at priority 2
    int lticks[NPROC]; // the number of ticks each process has accumulated at priority 1
};


#endif // _PSTAT_H_
